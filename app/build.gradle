plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs'
    id 'com.google.firebase.crashlytics'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.example.basearchitecture"
        minSdk 21
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

        buildConfigField "String", "BASEURL", "\"https://host.com/api/\""
        buildConfigField "String", "BASEURL_STAGING", "\"https://hostStaging.com/api/\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        dataBinding true
        viewBinding true
    }
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':domain')
    implementation project(':exception_catcher')

    implementation androidXDependencies.appcompat
    implementation androidXDependencies.core
    implementation androidXDependencies.constraintlayout
    implementation androidXDependencies.support
    implementation androidXDependencies.activity
    implementation androidXDependencies.fragment
    implementation thirthPartyDependencies.ccp
    implementation thirthPartyDependencies.keyboardVisibilityEvent
    kapt kaptDependencies.hilt
    kapt kaptDependencies.glide

    for (dep in hiltDependencies) {
        implementation dep
    }
    for (dep in liveDataVMDependencies) {
        implementation dep.value
    }
    for (dep in googleDependencies) {
        implementation dep
    }
    for (dep in firebaseDependencies) {
        implementation dep
    }
    for (dep in navigationDependencies) {
        implementation dep
    }
    for (dep in coroutineDependencies) {
        implementation dep
    }
    for (dep in mediaDependencies) {
        implementation dep
    }
    for (dep in testDependencies) {
        implementation dep.value
    }
}