plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'androidx.navigation.safeargs'
    id 'com.google.firebase.crashlytics'
}

android {
    compileSdk projectCompileSdk

    defaultConfig {
        applicationId "com.example.basearchitecture"
        minSdk projectMinSdk
        targetSdk projectTargetSdk
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            multiDexEnabled false

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures{
        viewBinding true
        dataBinding true
    }
    sourceSets {
        main {
            jniLibs.srcDirs += ['libs']
            // apart from ezio native libs, you need to add libjnidispatch.so from JNA, version to be aligned with jna.jar
        }
    }
    project.ext {
        ezioSdkDistDir = "$projectDir/libs"
    }

    sourceSets {
        debug {
            jniLibs.srcDirs += ["$ezioSdkDistDir/debug"]
        }
        release {
            jniLibs.srcDirs += ["$ezioSdkDistDir/release"]
        }
    }
}

project.ext {
    ezioSdkDistDir = "$projectDir/libs"
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(':domain')
    implementation project(':exception_catcher')
    implementation project(':gemalto')
    implementation project(':core')

    implementation androidXDependencies.appcompat
    implementation androidXDependencies.core
    implementation androidXDependencies.constraintlayout
    implementation androidXDependencies.support
    implementation androidXDependencies.activity
    implementation androidXDependencies.fragment
    
    kapt kaptDependencies.hilt

    for (dep in hiltDependencies) {
        implementation dep
    }

    // Gemalto -> for otp generation
    debugImplementation fileTree(dir: "$ezioSdkDistDir/debug", include: ['*.jar'])
    releaseImplementation fileTree(dir: "$ezioSdkDistDir/release", include: ['*.jar'])
    implementation jna
    implementation biometric
}